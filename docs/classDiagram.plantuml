@startuml

    ' Config
    hide empty members
    ' skinparam groupInheritance 2
    ' skinparam classAttributeIconSize 0
    ' left to right direction


    ' Pacotes

    package Definitions <<Rectangle>> {
        enum Item
        enum RiverBank
        struct Outcome
    }

    package Domain <<Rectangle>> {
        class Rule
        class State
        class Problem
    }

    package Structure <<Rectangle>> {
        class BasicEdge
        class BasicNode
        class BasicStructure

        package "Tree" as PK_Tree <<Rectangle>> {
            class TreeEdge
            class TreeNode
            class Tree

            package "WeightedTree" as PK_WeightedTree <<Rectangle>> {
                class WeightedTreeEdge
                abstract class WeightedTreeNode
                abstract class WeightedTree
                class OrderedTreeNode
                class GreedyTreeNode
                class AStarTreeNode
            }
        }

        package "Graph" as PK_Graph <<Rectangle>> {
            class GraphEdge
            class GraphNode
            class Graph
        }
    }

    package Searches <<Rectangle>> {
        abstract class Search

        package "UninformedSearch" as PK_UninformedSearch <<Rectangle>> {
        abstract class UninformedSearch
            class BacktrackingSearch
            class BreadthFirstSearch
            class DepthFirstSearch
        }

        package "InformedSearch" as PK_InformedSearch <<Rectangle>> {
            class InformedSearch
            class OrderedSearch
            class GreedySearch
            class AStarSearch
        }
    }


    ' Definições

    enum Item {
        Lamp = 0
	    Athlete = 1
	    Boy = 3
	    Lord = 6
	    Woman = 8
	    Lady = 12
    }

    enum RiverBank {
        Initial
        Final
    }

    struct Outcome {
        isTerminal: boolean
        win: boolean
    }


    ' Classes

    class Rule {
        -id: number
        -travellingPeople: Item[]
        +getElapsedTime(): number
        +transpose(state: State): State
    }

    class State {
        -initialRiverBank: Item[]
        -finalRiverBank: Item[]
        -remainingTime: number
        +getValidRules(): Rule[]
        +getOutcome(): Outcome
        +equalByItems(state: State): boolean
        +getLampPosition(): RiverBank
    }

    class Problem {
        -{static}rules: Rule[]
        +{static}getRule(firstPerson: Item, secondPerson?: Item): Rule
        +{static}isSolution(state: State): boolean
    }

    abstract class BasicEdge {
        -sourceNode: BasicNode
        -targetNode: BasicNode
        -rule: Rule
    }

    abstract class BasicNode {
        -id: number
        -state: State
        -targetEdges: BasicEdge[]
        #{abstract}addSourceEdge(sourceNode: BasicNode, rule: Rule): BasicEdge | null
        #addTargetEdge(targetNode: BasicNode, rule: Rule, connect: boolean): BasicEdge
        +addEdge(targetNode: BasicNode, rule: Rule, connect: boolean): BasicEdge
        +connectTargetEdges(targetEdges: BasicEdge[]): void
        +checkIfTransitionAlreadyExists(rule: Rule): boolean
    }

    abstract class BasicStructure {
        -nextNodeId: number
        #{abstract}instantiateNode(id: number, state: State): BasicNode
        #createNode(state: State): BasicNode
        +{abstract}createValidTransitions(node: BasicNode,\nsortingFunction: Function): BasicEdge[]
    }


    class TreeNode {
        -sourceEdge: TreeEdge | null
        +checkIfThereIsLoop(state: State): boolean
    }

    class Tree {
        -root: TreeNode
        +createNextValidTransition(node: TreeNode, \nsortingFunction: Function): TreeEdge | null
        +{static}getAscendingPath(node: TreeNode): TreeEdge[]
    }

    class WeightedTreeEdge {
        -weight: number
    }

    abstract class WeightedTreeNode {
        +getWeight(): number
        {abstract}+getValue(): number
    }

    class GreedyTreeNode {
        -getHeuristic(): number
    }

    class AStarTreeNode {
        -getHeuristic(): number
    }

    class GraphNode {
        -sourceEdges: GraphEdge[]
    }

    class Graph {
        -nodes: GraphNode[]
        +addNode(state: State): GraphNode
        +searchNode(state: State): GraphNode | null
    }

    abstract class Search {
        #tree: Tree
        +{static}getAlgorithmName(): string
        +{static}getSafeAlgorithmName(): string
        +{abstract}search(maxIterations?: number): TreeEdge[]
    }

    class BacktrackingSearch {
        {field}-sortingFunction: (Rule, Rule) => number
        -doBacktracking(startNode: TreeNode): \n{foundNode: TreeNode, isSolution: boolean}
    }

    abstract class UninformedSearch {
        #currentNode: TreeNode
        -openNodes: TreeNode[]
        -closedNodes: TreeNode[]
        {field}-sortingFunction: (TreeEdge, TreeEdge) => number
        {abstract}+getCurrentNode(remove: boolean): TreeNode
        -doIteration(): TreeEdge[] | null
    }

    abstract class InformedSearch {
        -currentNode: WeightedTreeNode
        -openEdges: WeightedTreeEdge[]
        -closedNodes: WeightedTreeNode[]
        {field}-sortingFunction: (WeightedTreeEdge, WeightedTreeEdge) => number
        #updateCurrentNode(): void
        -doIteration(currentNode: WeightedTreeNode): WeightedTreeEdge[] | null
    }


    ' Relacionamentos

    Rule "1" <-- "0..n" BasicEdge : Represents
    Problem "1" *-- "1..n" Rule : Has rules
    BasicNode "1" --> "0..n" BasicEdge : Has target
    BasicNode "1" --> "1" State : Has state
    TreeNode "1" --> "0..1" TreeEdge : Has source
    Tree "1" --> "1" TreeNode : Has root
    Tree "1" <-right- "1" Search : Construct tree
    TreeEdge --|> BasicEdge
    TreeNode --|> BasicNode
    Tree --|> BasicStructure
    GraphEdge --|> BasicEdge
    GraphNode --|> BasicNode
    Graph -u-|> BasicStructure
    BacktrackingSearch -left-|> Search
    UninformedSearch -up-|> Search
    InformedSearch -down-|> Search
    BreadthFirstSearch -up-|> UninformedSearch
    DepthFirstSearch -up-|> UninformedSearch
    OrderedSearch --|> InformedSearch
    GreedySearch --|> InformedSearch
    AStarSearch --|> InformedSearch
    WeightedTreeEdge --|> TreeEdge
    WeightedTreeNode --|> TreeNode
    WeightedTree --|> Tree
    OrderedTreeNode --|> WeightedTreeNode
    GreedyTreeNode -up-|> WeightedTreeNode
    AStarTreeNode -|> WeightedTreeNode

    Item -[hidden]left- RiverBank
    RiverBank -[hidden]left- Outcome
    BacktrackingSearch --[hidden]down-> Item
    GraphEdge -[hidden]r- Graph
    GraphNode -[hidden]u- Graph
    GreedyTreeNode -[hidden]down-> WeightedTreeEdge
    PK_InformedSearch -[hidden]down-- PK_UninformedSearch


@enduml